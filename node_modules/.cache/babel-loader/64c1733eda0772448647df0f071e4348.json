{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nexports.getPercentageFromPosition = getPercentageFromPosition;\nexports.getValueFromPosition = getValueFromPosition;\nexports.getValueFromProps = getValueFromProps;\nexports.getPercentageFromValue = getPercentageFromValue;\nexports.getPercentagesFromValues = getPercentagesFromValues;\nexports.getPositionFromValue = getPositionFromValue;\nexports.getPositionsFromValues = getPositionsFromValues;\nexports.getPositionFromEvent = getPositionFromEvent;\nexports.getStepValueFromValue = getStepValueFromValue;\nvar _utils = require('../utils');\n\n/**\n * Convert a point into a percentage value\n * @ignore\n * @param {Point} position\n * @param {ClientRect} clientRect\n * @return {number} Percentage value\n */\nfunction getPercentageFromPosition(position, clientRect) {\n  var length = clientRect.width;\n  var sizePerc = position.x / length;\n  return sizePerc || 0;\n}\n\n/**\n * Convert a point into a model value\n * @ignore\n * @param {Point} position\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {number}\n */\nfunction getValueFromPosition(position, minValue, maxValue, clientRect) {\n  var sizePerc = getPercentageFromPosition(position, clientRect);\n  var valueDiff = maxValue - minValue;\n  return minValue + valueDiff * sizePerc;\n}\n\n/**\n * Convert props into a range value\n * @ignore\n * @param {Object} props\n * @param {boolean} isMultiValue\n * @return {Range}\n */\nfunction getValueFromProps(props, isMultiValue) {\n  if (isMultiValue) {\n    return _extends({}, props.value);\n  }\n  return {\n    min: props.minValue,\n    max: props.value\n  };\n}\n\n/**\n * Convert a model value into a percentage value\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @return {number}\n */\nfunction getPercentageFromValue(value, minValue, maxValue) {\n  var validValue = (0, _utils.clamp)(value, minValue, maxValue);\n  var valueDiff = maxValue - minValue;\n  var valuePerc = (validValue - minValue) / valueDiff;\n  return valuePerc || 0;\n}\n\n/**\n * Convert model values into percentage values\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @return {Range}\n */\nfunction getPercentagesFromValues(values, minValue, maxValue) {\n  return {\n    min: getPercentageFromValue(values.min, minValue, maxValue),\n    max: getPercentageFromValue(values.max, minValue, maxValue)\n  };\n}\n\n/**\n * Convert a value into a point\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Point} Position\n */\nfunction getPositionFromValue(value, minValue, maxValue, clientRect) {\n  var length = clientRect.width;\n  var valuePerc = getPercentageFromValue(value, minValue, maxValue);\n  var positionValue = valuePerc * length;\n  return {\n    x: positionValue,\n    y: 0\n  };\n}\n\n/**\n * Convert a range of values into points\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Range}\n */\nfunction getPositionsFromValues(values, minValue, maxValue, clientRect) {\n  return {\n    min: getPositionFromValue(values.min, minValue, maxValue, clientRect),\n    max: getPositionFromValue(values.max, minValue, maxValue, clientRect)\n  };\n}\n\n/**\n * Convert an event into a point\n * @ignore\n * @param {Event} event\n * @param {ClientRect} clientRect\n * @return {Point}\n */\nfunction getPositionFromEvent(event, clientRect) {\n  var length = clientRect.width;\n  var _ref = event.touches ? event.touches[0] : event,\n    clientX = _ref.clientX;\n  return {\n    x: (0, _utils.clamp)(clientX - clientRect.left, 0, length),\n    y: 0\n  };\n}\n\n/**\n * Convert a value into a step value\n * @ignore\n * @param {number} value\n * @param {number} valuePerStep\n * @return {number}\n */\nfunction getStepValueFromValue(value, valuePerStep) {\n  return Math.round(value / valuePerStep) * valuePerStep;\n}","map":{"version":3,"sources":["../../../src/js/input-range/value-transformer.js"],"names":["getPercentageFromPosition","position","clientRect","length","width","sizePerc","x","getValueFromPosition","minValue","maxValue","valueDiff","getValueFromProps","props","isMultiValue","value","min","max","getPercentageFromValue","validValue","valuePerc","getPercentagesFromValues","values","getPositionFromValue","positionValue","y","getPositionsFromValues","getPositionFromEvent","event","clientX","touches","left","getStepValueFromValue","valuePerStep","Math","round"],"mappings":"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","sourcesContent":["import { clamp } from '../utils';\n\n/**\n * Convert a point into a percentage value\n * @ignore\n * @param {Point} position\n * @param {ClientRect} clientRect\n * @return {number} Percentage value\n */\nexport function getPercentageFromPosition(position, clientRect) {\n  const length = clientRect.width;\n  const sizePerc = position.x / length;\n\n  return sizePerc || 0;\n}\n\n/**\n * Convert a point into a model value\n * @ignore\n * @param {Point} position\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {number}\n */\nexport function getValueFromPosition(position, minValue, maxValue, clientRect) {\n  const sizePerc = getPercentageFromPosition(position, clientRect);\n  const valueDiff = maxValue - minValue;\n\n  return minValue + (valueDiff * sizePerc);\n}\n\n/**\n * Convert props into a range value\n * @ignore\n * @param {Object} props\n * @param {boolean} isMultiValue\n * @return {Range}\n */\nexport function getValueFromProps(props, isMultiValue) {\n  if (isMultiValue) {\n    return { ...props.value };\n  }\n\n  return {\n    min: props.minValue,\n    max: props.value,\n  };\n}\n\n/**\n * Convert a model value into a percentage value\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @return {number}\n */\nexport function getPercentageFromValue(value, minValue, maxValue) {\n  const validValue = clamp(value, minValue, maxValue);\n  const valueDiff = maxValue - minValue;\n  const valuePerc = (validValue - minValue) / valueDiff;\n\n  return valuePerc || 0;\n}\n\n/**\n * Convert model values into percentage values\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @return {Range}\n */\nexport function getPercentagesFromValues(values, minValue, maxValue) {\n  return {\n    min: getPercentageFromValue(values.min, minValue, maxValue),\n    max: getPercentageFromValue(values.max, minValue, maxValue),\n  };\n}\n\n/**\n * Convert a value into a point\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Point} Position\n */\nexport function getPositionFromValue(value, minValue, maxValue, clientRect) {\n  const length = clientRect.width;\n  const valuePerc = getPercentageFromValue(value, minValue, maxValue);\n  const positionValue = valuePerc * length;\n\n  return {\n    x: positionValue,\n    y: 0,\n  };\n}\n\n/**\n * Convert a range of values into points\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Range}\n */\nexport function getPositionsFromValues(values, minValue, maxValue, clientRect) {\n  return {\n    min: getPositionFromValue(values.min, minValue, maxValue, clientRect),\n    max: getPositionFromValue(values.max, minValue, maxValue, clientRect),\n  };\n}\n\n/**\n * Convert an event into a point\n * @ignore\n * @param {Event} event\n * @param {ClientRect} clientRect\n * @return {Point}\n */\nexport function getPositionFromEvent(event, clientRect) {\n  const length = clientRect.width;\n  const { clientX } = event.touches ? event.touches[0] : event;\n\n  return {\n    x: clamp(clientX - clientRect.left, 0, length),\n    y: 0,\n  };\n}\n\n/**\n * Convert a value into a step value\n * @ignore\n * @param {number} value\n * @param {number} valuePerStep\n * @return {number}\n */\nexport function getStepValueFromValue(value, valuePerStep) {\n  return Math.round(value / valuePerStep) * valuePerStep;\n}\n"]},"metadata":{},"sourceType":"script"}