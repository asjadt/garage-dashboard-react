{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getMatchBounds;\nvar _escapeStringRegexp = require('escape-string-regexp');\nvar _escapeStringRegexp2 = _interopRequireDefault(_escapeStringRegexp);\nvar _stripDiacritics = require('./stripDiacritics');\nvar _stripDiacritics2 = _interopRequireDefault(_stripDiacritics);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar CASE_INSENSITIVE = 'i';\nvar COMBINING_MARKS = /[\\u0300-\\u036F]/;\nfunction getMatchBounds(subject, search) {\n  search = new RegExp((0, _escapeStringRegexp2.default)((0, _stripDiacritics2.default)(search)), CASE_INSENSITIVE);\n  var matches = search.exec((0, _stripDiacritics2.default)(subject));\n  if (!matches) {\n    return null;\n  }\n  var start = matches.index;\n  var matchLength = matches[0].length;\n\n  // Account for combining marks, which changes the indices.\n  if (COMBINING_MARKS.test(subject)) {\n    // Starting at the beginning of the subject string, check for the number of\n    // combining marks and increment the start index whenever one is found.\n    for (var ii = 0; ii <= start; ii++) {\n      if (COMBINING_MARKS.test(subject[ii])) {\n        start++;\n      }\n    }\n\n    // Similarly, increment the length of the match string if it contains a\n    // combining mark.\n    for (var _ii = start; _ii <= start + matchLength; _ii++) {\n      if (COMBINING_MARKS.test(subject[_ii])) {\n        matchLength++;\n      }\n    }\n  }\n  return {\n    end: start + matchLength,\n    start: start\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","getMatchBounds","_escapeStringRegexp","require","_escapeStringRegexp2","_interopRequireDefault","_stripDiacritics","_stripDiacritics2","obj","__esModule","CASE_INSENSITIVE","COMBINING_MARKS","subject","search","RegExp","matches","exec","start","index","matchLength","length","test","ii","_ii","end"],"sources":["/home/rifat/uk client/garage/garage-frontend-2/theme/node_modules/react-times/node_modules/react-bootstrap-typeahead/lib/utils/getMatchBounds.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getMatchBounds;\n\nvar _escapeStringRegexp = require('escape-string-regexp');\n\nvar _escapeStringRegexp2 = _interopRequireDefault(_escapeStringRegexp);\n\nvar _stripDiacritics = require('./stripDiacritics');\n\nvar _stripDiacritics2 = _interopRequireDefault(_stripDiacritics);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar CASE_INSENSITIVE = 'i';\nvar COMBINING_MARKS = /[\\u0300-\\u036F]/;\n\nfunction getMatchBounds(subject, search) {\n  search = new RegExp((0, _escapeStringRegexp2.default)((0, _stripDiacritics2.default)(search)), CASE_INSENSITIVE);\n\n  var matches = search.exec((0, _stripDiacritics2.default)(subject));\n\n  if (!matches) {\n    return null;\n  }\n\n  var start = matches.index;\n  var matchLength = matches[0].length;\n\n  // Account for combining marks, which changes the indices.\n  if (COMBINING_MARKS.test(subject)) {\n    // Starting at the beginning of the subject string, check for the number of\n    // combining marks and increment the start index whenever one is found.\n    for (var ii = 0; ii <= start; ii++) {\n      if (COMBINING_MARKS.test(subject[ii])) {\n        start++;\n      }\n    }\n\n    // Similarly, increment the length of the match string if it contains a\n    // combining mark.\n    for (var _ii = start; _ii <= start + matchLength; _ii++) {\n      if (COMBINING_MARKS.test(subject[_ii])) {\n        matchLength++;\n      }\n    }\n  }\n\n  return {\n    end: start + matchLength,\n    start: start\n  };\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,cAAc;AAEhC,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAEzD,IAAIC,oBAAoB,GAAGC,sBAAsB,CAACH,mBAAmB,CAAC;AAEtE,IAAII,gBAAgB,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAEnD,IAAII,iBAAiB,GAAGF,sBAAsB,CAACC,gBAAgB,CAAC;AAEhE,SAASD,sBAAsB,CAACG,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAER,OAAO,EAAEQ;EAAI,CAAC;AAAE;AAE9F,IAAIE,gBAAgB,GAAG,GAAG;AAC1B,IAAIC,eAAe,GAAG,iBAAiB;AAEvC,SAASV,cAAc,CAACW,OAAO,EAAEC,MAAM,EAAE;EACvCA,MAAM,GAAG,IAAIC,MAAM,CAAC,CAAC,CAAC,EAAEV,oBAAoB,CAACJ,OAAO,EAAE,CAAC,CAAC,EAAEO,iBAAiB,CAACP,OAAO,EAAEa,MAAM,CAAC,CAAC,EAAEH,gBAAgB,CAAC;EAEhH,IAAIK,OAAO,GAAGF,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC,EAAET,iBAAiB,CAACP,OAAO,EAAEY,OAAO,CAAC,CAAC;EAElE,IAAI,CAACG,OAAO,EAAE;IACZ,OAAO,IAAI;EACb;EAEA,IAAIE,KAAK,GAAGF,OAAO,CAACG,KAAK;EACzB,IAAIC,WAAW,GAAGJ,OAAO,CAAC,CAAC,CAAC,CAACK,MAAM;;EAEnC;EACA,IAAIT,eAAe,CAACU,IAAI,CAACT,OAAO,CAAC,EAAE;IACjC;IACA;IACA,KAAK,IAAIU,EAAE,GAAG,CAAC,EAAEA,EAAE,IAAIL,KAAK,EAAEK,EAAE,EAAE,EAAE;MAClC,IAAIX,eAAe,CAACU,IAAI,CAACT,OAAO,CAACU,EAAE,CAAC,CAAC,EAAE;QACrCL,KAAK,EAAE;MACT;IACF;;IAEA;IACA;IACA,KAAK,IAAIM,GAAG,GAAGN,KAAK,EAAEM,GAAG,IAAIN,KAAK,GAAGE,WAAW,EAAEI,GAAG,EAAE,EAAE;MACvD,IAAIZ,eAAe,CAACU,IAAI,CAACT,OAAO,CAACW,GAAG,CAAC,CAAC,EAAE;QACtCJ,WAAW,EAAE;MACf;IACF;EACF;EAEA,OAAO;IACLK,GAAG,EAAEP,KAAK,GAAGE,WAAW;IACxBF,KAAK,EAAEA;EACT,CAAC;AACH"},"metadata":{},"sourceType":"script"}