{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = valuePropType;\nvar _utils = require('../utils');\n\n/**\n * @ignore\n * @param {Object} props\n * @return {?Error} Return Error if validation fails\n */\nfunction valuePropType(props, propName) {\n  var maxValue = props.maxValue,\n    minValue = props.minValue;\n  var value = props[propName];\n  if (!(0, _utils.isNumber)(value) && (!(0, _utils.isObject)(value) || !(0, _utils.isNumber)(value.min) || !(0, _utils.isNumber)(value.max))) {\n    return new Error('\"' + propName + '\" must be a number or a range object');\n  }\n  if ((0, _utils.isNumber)(value) && (value < minValue || value > maxValue)) {\n    return new Error('\"' + propName + '\" must be in between \"minValue\" and \"maxValue\"');\n  }\n  if ((0, _utils.isObject)(value) && (value.min < minValue || value.min > maxValue || value.max < minValue || value.max > maxValue)) {\n    return new Error('\"' + propName + '\" must be in between \"minValue\" and \"maxValue\"');\n  }\n}\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../../src/js/input-range/value-prop-type.js"],"names":["valuePropType","props","propName","maxValue","minValue","value","min","max","Error"],"mappings":";;;;;kBAOwBA,a;AAPxB,IAAA,MAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA;;;;;AAKe,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAwC;EAAA,IAC7CC,QAD6C,GACtBF,KADsB,CAC7CE,QAD6C;IACnCC,QADmC,GACtBH,KADsB,CACnCG,QADmC;EAErD,IAAMC,KAAAA,GAAQJ,KAAAA,CAAMC,QAAND,CAAd;EAEA,IAAI,CAAC,CAAA,CAAA,EAAA,MAAA,CAAA,QAAA,EAASI,KAAT,CAAD,KAAqB,CAAC,CAAA,CAAA,EAAA,MAAA,CAAA,QAAA,EAASA,KAAT,CAAD,IAAoB,CAAC,CAAA,CAAA,EAAA,MAAA,CAAA,QAAA,EAASA,KAAAA,CAAMC,GAAf,CAArB,IAA4C,CAAC,CAAA,CAAA,EAAA,MAAA,CAAA,QAAA,EAASD,KAAAA,CAAME,GAAf,CAAlE,CAAJ,EAA4F;IAC1F,OAAO,IAAIC,KAAJ,CAAA,GAAA,GAAcN,QAAd,GAAA,sCAAA,CAAP;EACD;EAED,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,QAAA,EAASG,KAAT,CAAA,KAAoBA,KAAAA,GAAQD,QAARC,IAAoBA,KAAAA,GAAQF,QAAhD,CAAJ,EAA+D;IAC7D,OAAO,IAAIK,KAAJ,CAAA,GAAA,GAAcN,QAAd,GAAA,gDAAA,CAAP;EACD;EAED,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,QAAA,EAASG,KAAT,CAAA,KAAoBA,KAAAA,CAAMC,GAAND,GAAYD,QAAZC,IAAwBA,KAAAA,CAAMC,GAAND,GAAYF,QAApCE,IAAgDA,KAAAA,CAAME,GAANF,GAAYD,QAA5DC,IAAwEA,KAAAA,CAAME,GAANF,GAAYF,QAAxG,CAAJ,EAAuH;IACrH,OAAO,IAAIK,KAAJ,CAAA,GAAA,GAAcN,QAAd,GAAA,gDAAA,CAAP;EACD;AACF","sourcesContent":["import { isNumber, isObject } from '../utils';\n\n/**\n * @ignore\n * @param {Object} props\n * @return {?Error} Return Error if validation fails\n */\nexport default function valuePropType(props, propName) {\n  const { maxValue, minValue } = props;\n  const value = props[propName];\n\n  if (!isNumber(value) && (!isObject(value) || !isNumber(value.min) || !isNumber(value.max))) {\n    return new Error(`\"${propName}\" must be a number or a range object`);\n  }\n\n  if (isNumber(value) && (value < minValue || value > maxValue)) {\n    return new Error(`\"${propName}\" must be in between \"minValue\" and \"maxValue\"`);\n  }\n\n  if (isObject(value) && (value.min < minValue || value.min > maxValue || value.max < minValue || value.max > maxValue)) {\n    return new Error(`\"${propName}\" must be in between \"minValue\" and \"maxValue\"`);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}