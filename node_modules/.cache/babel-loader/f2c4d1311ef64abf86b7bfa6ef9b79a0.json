{"ast":null,"code":"import invariant from 'invariant';\nimport getStringLabelKey from './getStringLabelKey';\nimport { isFunction, isString } from './nodash';\n\n/**\n * Retrieves the display string from an option. Options can be the string\n * themselves, or an object with a defined display string. Anything else throws\n * an error.\n */\nfunction getOptionLabel(option, labelKey) {\n  // Handle internally created options first.\n  if (!isString(option) && (option.paginationOption || option.customOption)) {\n    return option[getStringLabelKey(labelKey)];\n  }\n  var optionLabel;\n  if (isFunction(labelKey)) {\n    optionLabel = labelKey(option);\n  } else if (isString(option)) {\n    optionLabel = option;\n  } else {\n    // `option` is an object and `labelKey` is a string.\n    optionLabel = option[labelKey];\n  }\n  !isString(optionLabel) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'One or more options does not have a valid label string. Check the ' + '`labelKey` prop to ensure that it matches the correct option key and ' + 'provides a string for filtering and display.') : invariant(false) : void 0;\n  return optionLabel;\n}\nexport default getOptionLabel;","map":{"version":3,"names":["invariant","getStringLabelKey","isFunction","isString","getOptionLabel","option","labelKey","paginationOption","customOption","optionLabel","process","env","NODE_ENV"],"sources":["/home/rifat/uk client/garage/garage-frontend-2/theme/node_modules/react-bootstrap-typeahead/es/utils/getOptionLabel.js"],"sourcesContent":["import invariant from 'invariant';\nimport getStringLabelKey from './getStringLabelKey';\nimport { isFunction, isString } from './nodash';\n\n/**\n * Retrieves the display string from an option. Options can be the string\n * themselves, or an object with a defined display string. Anything else throws\n * an error.\n */\nfunction getOptionLabel(option, labelKey) {\n  // Handle internally created options first.\n  if (!isString(option) && (option.paginationOption || option.customOption)) {\n    return option[getStringLabelKey(labelKey)];\n  }\n\n  var optionLabel;\n\n  if (isFunction(labelKey)) {\n    optionLabel = labelKey(option);\n  } else if (isString(option)) {\n    optionLabel = option;\n  } else {\n    // `option` is an object and `labelKey` is a string.\n    optionLabel = option[labelKey];\n  }\n\n  !isString(optionLabel) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'One or more options does not have a valid label string. Check the ' + '`labelKey` prop to ensure that it matches the correct option key and ' + 'provides a string for filtering and display.') : invariant(false) : void 0;\n  return optionLabel;\n}\n\nexport default getOptionLabel;"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AACjC,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,SAASC,UAAU,EAAEC,QAAQ,QAAQ,UAAU;;AAE/C;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACC,MAAM,EAAEC,QAAQ,EAAE;EACxC;EACA,IAAI,CAACH,QAAQ,CAACE,MAAM,CAAC,KAAKA,MAAM,CAACE,gBAAgB,IAAIF,MAAM,CAACG,YAAY,CAAC,EAAE;IACzE,OAAOH,MAAM,CAACJ,iBAAiB,CAACK,QAAQ,CAAC,CAAC;EAC5C;EAEA,IAAIG,WAAW;EAEf,IAAIP,UAAU,CAACI,QAAQ,CAAC,EAAE;IACxBG,WAAW,GAAGH,QAAQ,CAACD,MAAM,CAAC;EAChC,CAAC,MAAM,IAAIF,QAAQ,CAACE,MAAM,CAAC,EAAE;IAC3BI,WAAW,GAAGJ,MAAM;EACtB,CAAC,MAAM;IACL;IACAI,WAAW,GAAGJ,MAAM,CAACC,QAAQ,CAAC;EAChC;EAEA,CAACH,QAAQ,CAACM,WAAW,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGZ,SAAS,CAAC,KAAK,EAAE,oEAAoE,GAAG,uEAAuE,GAAG,8CAA8C,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EAC9S,OAAOS,WAAW;AACpB;AAEA,eAAeL,cAAc"},"metadata":{},"sourceType":"module"}