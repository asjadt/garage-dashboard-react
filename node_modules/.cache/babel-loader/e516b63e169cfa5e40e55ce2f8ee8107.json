{"ast":null,"code":"import getMatchBounds from './getMatchBounds';\nimport getOptionLabel from './getOptionLabel';\nfunction getHintText(props) {\n  var activeIndex = props.activeIndex,\n    initialItem = props.initialItem,\n    isFocused = props.isFocused,\n    isMenuShown = props.isMenuShown,\n    labelKey = props.labelKey,\n    multiple = props.multiple,\n    selected = props.selected,\n    text = props.text; // Don't display a hint under the following conditions:\n\n  if (\n  // No text entered.\n  !text ||\n  // The input is not focused.\n  !isFocused ||\n  // The menu is hidden.\n  !isMenuShown ||\n  // No item in the menu.\n  !initialItem ||\n  // The initial item is a custom option.\n  initialItem.customOption ||\n  // One of the menu items is active.\n  activeIndex > -1 ||\n  // There's already a selection in single-select mode.\n  !!selected.length && !multiple) {\n    return '';\n  }\n  var initialItemStr = getOptionLabel(initialItem, labelKey);\n  var bounds = getMatchBounds(initialItemStr.toLowerCase(), text.toLowerCase());\n  if (!(bounds && bounds.start === 0)) {\n    return '';\n  } // Text matching is case- and accent-insensitive, so to display the hint\n  // correctly, splice the input string with the hint string.\n\n  return text + initialItemStr.slice(bounds.end, initialItemStr.length);\n}\nexport default getHintText;","map":{"version":3,"names":["getMatchBounds","getOptionLabel","getHintText","props","activeIndex","initialItem","isFocused","isMenuShown","labelKey","multiple","selected","text","customOption","length","initialItemStr","bounds","toLowerCase","start","slice","end"],"sources":["/home/rifat/uk client/garage/garage-frontend-2/theme/node_modules/react-bootstrap-typeahead/es/utils/getHintText.js"],"sourcesContent":["import getMatchBounds from './getMatchBounds';\nimport getOptionLabel from './getOptionLabel';\n\nfunction getHintText(props) {\n  var activeIndex = props.activeIndex,\n      initialItem = props.initialItem,\n      isFocused = props.isFocused,\n      isMenuShown = props.isMenuShown,\n      labelKey = props.labelKey,\n      multiple = props.multiple,\n      selected = props.selected,\n      text = props.text; // Don't display a hint under the following conditions:\n\n  if ( // No text entered.\n  !text || // The input is not focused.\n  !isFocused || // The menu is hidden.\n  !isMenuShown || // No item in the menu.\n  !initialItem || // The initial item is a custom option.\n  initialItem.customOption || // One of the menu items is active.\n  activeIndex > -1 || // There's already a selection in single-select mode.\n  !!selected.length && !multiple) {\n    return '';\n  }\n\n  var initialItemStr = getOptionLabel(initialItem, labelKey);\n  var bounds = getMatchBounds(initialItemStr.toLowerCase(), text.toLowerCase());\n\n  if (!(bounds && bounds.start === 0)) {\n    return '';\n  } // Text matching is case- and accent-insensitive, so to display the hint\n  // correctly, splice the input string with the hint string.\n\n\n  return text + initialItemStr.slice(bounds.end, initialItemStr.length);\n}\n\nexport default getHintText;"],"mappings":"AAAA,OAAOA,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,SAASC,WAAW,CAACC,KAAK,EAAE;EAC1B,IAAIC,WAAW,GAAGD,KAAK,CAACC,WAAW;IAC/BC,WAAW,GAAGF,KAAK,CAACE,WAAW;IAC/BC,SAAS,GAAGH,KAAK,CAACG,SAAS;IAC3BC,WAAW,GAAGJ,KAAK,CAACI,WAAW;IAC/BC,QAAQ,GAAGL,KAAK,CAACK,QAAQ;IACzBC,QAAQ,GAAGN,KAAK,CAACM,QAAQ;IACzBC,QAAQ,GAAGP,KAAK,CAACO,QAAQ;IACzBC,IAAI,GAAGR,KAAK,CAACQ,IAAI,CAAC,CAAC;;EAEvB;EAAK;EACL,CAACA,IAAI;EAAI;EACT,CAACL,SAAS;EAAI;EACd,CAACC,WAAW;EAAI;EAChB,CAACF,WAAW;EAAI;EAChBA,WAAW,CAACO,YAAY;EAAI;EAC5BR,WAAW,GAAG,CAAC,CAAC;EAAI;EACpB,CAAC,CAACM,QAAQ,CAACG,MAAM,IAAI,CAACJ,QAAQ,EAAE;IAC9B,OAAO,EAAE;EACX;EAEA,IAAIK,cAAc,GAAGb,cAAc,CAACI,WAAW,EAAEG,QAAQ,CAAC;EAC1D,IAAIO,MAAM,GAAGf,cAAc,CAACc,cAAc,CAACE,WAAW,EAAE,EAAEL,IAAI,CAACK,WAAW,EAAE,CAAC;EAE7E,IAAI,EAAED,MAAM,IAAIA,MAAM,CAACE,KAAK,KAAK,CAAC,CAAC,EAAE;IACnC,OAAO,EAAE;EACX,CAAC,CAAC;EACF;;EAGA,OAAON,IAAI,GAAGG,cAAc,CAACI,KAAK,CAACH,MAAM,CAACI,GAAG,EAAEL,cAAc,CAACD,MAAM,CAAC;AACvE;AAEA,eAAeX,WAAW"},"metadata":{},"sourceType":"module"}